[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "create_database",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_database(database_name):\n    try:\n        conn = sqlite3.connect(database_name)\n        cursor = conn.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS lobbyists (\n                FilerID TEXT,\n                FirstName TEXT,\n                LastName TEXT,\n                Address TEXT,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def insert_data(conn, cursor, data):\n    try:\n        # Prepare a list of values to insert, replacing missing values with None\n        values = [\n            data.get('Filer ID', None),\n            data.get('First Name', None),\n            data.get('Last Name', None),\n            data.get('Address', None),\n            data.get('Phone', None),\n            data.get('Email', None),",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "send_request",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def send_request(url, retries=3):\n    for attempt in range(retries):\n        try:\n            response = requests.get(url,timeout=30)\n            response.raise_for_status()\n            return response\n        except ConnectionError as e:\n            print(f\"Attempt {attempt+1} failed: {e}\")\n            if attempt < retries - 1:\n                print(\"Retrying...\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_filer_id_exists",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_filer_id_exists(conn, cursor, filer_id):\n    try:\n        cursor.execute('SELECT COUNT(*) FROM lobbyists WHERE FilerID = ?', (filer_id,))\n        row_count = cursor.fetchone()[0]\n        return row_count > 0\n    except sqlite3.Error as e:\n        print(\"Error checking filer_id existence:\", e)\n        return False\ndef scrape_profile(url,filer_id,conn,cursor):\n    try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "scrape_profile",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def scrape_profile(url,filer_id,conn,cursor):\n    try:\n        item={}\n        item['Filer ID']=filer_id\n        response=send_request(url)\n        soup=BeautifulSoup(response.content,'html.parser')\n        name=soup.find('span',{'id':'lblFilerName'}).text\n        if ',' in name:\n            name=soup.find('span',{'id':'lblFilerName'}).text.split(',')\n            first_name=name[0].strip()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "scrape_filter_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def scrape_filter_page(url):\n    response=send_request(url)\n    soup=BeautifulSoup(response.content,'html.parser')\n    table=soup.find('table',{'id':'lobbyists'})\n    trs=table.find_all('tr')\n    for tr in trs:\n        tds=tr.find_all('td')\n        slug=tds[0].find('a')['href']\n        filer_id=tds[1].text\n        base_url='https://cal-access.sos.ca.gov/Lobbying/Lobbyists/'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "conn = sqlite3.connect(\"lobbyist_data.db\")\ncursor = conn.cursor()\ndef insert_data(conn, cursor, data):\n    try:\n        # Prepare a list of values to insert, replacing missing values with None\n        values = [\n            data.get('Filer ID', None),\n            data.get('First Name', None),\n            data.get('Last Name', None),\n            data.get('Address', None),",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "cursor = conn.cursor()\ndef insert_data(conn, cursor, data):\n    try:\n        # Prepare a list of values to insert, replacing missing values with None\n        values = [\n            data.get('Filer ID', None),\n            data.get('First Name', None),\n            data.get('Last Name', None),\n            data.get('Address', None),\n            data.get('Phone', None),",
        "detail": "app",
        "documentation": {}
    }
]